@component-name = "portal-security"
definition {

	property custom.properties = "feature.flag.LPS-142518=true";
	property portal.release = "quarantine";
	property portal.upstream = "true";
	property testray.main.component.name = "Cookies";

	setUp {
		task ("Setup: Setup portal instance") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}
	}

	@description = "This is a use case for LPS-142518. TC-4 Verify that Decline All could be set and cookies are stored with declined values."
	@priority = "5"
	test CookiesConsentPanelDeclineAllSelected {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentDeclineAllSelected";

		task ("Given: Use opens the Cookie consent portlet in a popup") {
			CookieBannerAdmin.configuredToShowBanner();

			CookieBanner.openCookieConsentPanel();
		}

		task ("When: User click on Decline all") {
			CookieConsentPanel.cookiesDeclineAll();
		}

		task ("Then: All cookie consent category related cookies are created and saved with 'declined' as value.") {
			CookieHelper.checkAllCookieAreDeclinedAndSaved();
		}

		task ("And: Cookie Consent portlet in the popup is closed.") {
			CookieBanner.checkCookieConsentPanelIsNotVisible();
		}
	}

	@description = "This is a use case for LPS-142518. TC-5 When End-User accept selected cookies, only selected cookies are saved."
	@priority = "5"
	test CookiesConsentPanelAcceptsOnlySelectedCookies {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelAcceptsOnlySelectedCookies";

		task ("Given: User opens the Cookie Consent portlet from the Cookie Banner via Configuration link") {
			CookieBannerAdmin.configuredToShowBanner();

			CookieBanner.openCookieConsentPanel();
		}

		task ("When: User accepts only selected cookies via Accept Selected button") {
			CookieConsentPanel.editCookieConsentConsent(
				functionalCookies = "true",
				performanceCookies = "true");
		}

		task ("Then: Only selected cookie category related cookies are saved, and nothing more") {
			CookieConsentPanel.verifyCookiesAreNotPresent();
		}
	}

	@description = "This is a use case for LPS-142518. TC-7 Verify that Cookie Consent Panel could be added to a Site Page."
	@priority = "5"
	test CookiesConsentPanelCouldBeAddedToASitePage {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeAddedToASitePage";

		task ("Given: User creates a site page and adds Cookie Consent Configuration widget to it.") {
			CookieBannerAdmin.configuredToShowBanner();

			CookieHelper.createSitePageWithCookieBannerConfigurationPortlet();
		}

		task ("Then: All elements of the Cookie Consent Portlet are present on the site page") {
			CookieConsentPanel.verifyAllElementsArePresentOnCookieConsentPortlet();
		}
	}

	@description = "This is a use case for LPS-152844. Combined AC-5, AC-6, AC-7. Verify that Cookie Consent pangel could be enabled and customized."
	test CookiesConsentPanelCouldBeEnabledAndCustomized {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeEnabledAndCustomized";

		task ("Given: a site configured to show the Banner") {
			CookieBannerAdmin.configuredToShowBanner();
		}

		task ("When: the End User opens the 'Cookie Consent' panel") {
			CookieNavigator.gotoSiteSettings(portlet = "Cookie Consent");

			CookieConsentAdmin.setCustomTextForAllFields(text = "SITE");

			CookieBanner.openCookieConsentPanel();
		}

		task ("Then: they see the panel's title as the Title is configured for the 'Consent Panel' in the site administration.") {
			CookieConsentPanel.verifyCustomTextsArePresent(key_text = "SITE");
		}
	}

	@description = "This is a use case for LPS-152844. AC-8. Verify that Cookie Consent panel could be enabled and customized on a Site page."
	test CookiesConsentPanelCouldBeEnabledAndCustomizedOnASitePage {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeEnabledAndCustomizedOnASitePage";

		task ("Given: a site configured to show the Banner") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "PolicyPage");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "PolicyPage",
				widgetName = "Type Facet");

			CookieBannerAdmin.configuredToShowBanner();
		}

		task ("When: the End User opens the 'Cookie Consent' panel and clicks on the 'Cookie Policy Link's Display Link Text' with the configured URL as a link on that after the Description") {
			CookieNavigator.gotoSiteSettings(portlet = "Cookie Consent");

			CookieConsentAdmin.setCookiePolicyLink(cookiePolicyLink = "/web/guest/policypage");

			CookieBanner.openCookieConsentPanel();

			CookieConsentPanel.clickOnPolicyLink(cookiePolicyLink = "/web/guest/policypage");
		}

		task ("Then: they go to the 'Cookie Policy Link' page.") {
			CookieHelper.verifyPolicyPageIsVisible(cookiePolicyLink = "/web/guest/policypage");
		}
	}

	@description = "This is a use case for LPS-142518. TC-6 Verify that Cookie Consent Panel could be used to save Cookie Preferences."
	@priority = "5"
	test CookiesConsentPanelCouldSaveCookieSettingsWhenItsOnASitePage {
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldSaveCookieSettingsWhenItsOnASitePage";

		task ("Given: User creates a site page and adds Cookie Consent Configuration widget to it.") {
			CookieBannerAdmin.configuredToShowBanner();

			CookieHelper.createSitePageWithCookieBannerConfigurationPortlet();
		}

		task ("When: User selects Accept All button on the Cookie Consent Configuration widget") {
			CookieConsentPanel.selectAllCookiesOnConsentPanel();
		}

		task ("Then: All cookie consent category related cookies are created and saved with 'accepted' as value.") {
			CookieHelper.checkAllCookieAreAcceptedAndSaved();
		}
	}

}