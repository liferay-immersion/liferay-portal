@component-name = "portal-headless-frontend-infrastructure"
definition {

	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Load headless delivery openAPI explorer"
	@priority = "5"
	test CanLoadHeadlessDeliveryOpenAPI {
		property portal.acceptance = "true";

		task ("Given navigate to headless delivery endpoint") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-delivery",
				version = "v1.0");
		}

		task ("Then headless delivery api loaded with no errors") {
			var portalURL = PropsUtil.get("portal.url");

			AssertTextEquals(
				locator1 = "Select#HEADLESS_SERVERS",
				value1 = "${portalURL}/o/headless-delivery/");

			AssertConsoleTextNotPresent(value1 = "Failed to load API definition");
		}
	}

	@priority = "5"
	test CanRetrieveSiteBlogPostingsWithHeadlessDeliveryOpenAPI {
		property portal.acceptance = "true";

		task ("Given navigate to headless delivery endpoint") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-delivery",
				version = "v1.0");
		}

		task ("When executing getSiteBlogPosingPage with siteID as the parameter") {
			var siteId = JSONGroupAPI._getGroupIdByNameNoSelenium(
				groupName = "Guest",
				site = "true");

			APIExplorer.executeAPIMethodWithParameters(
				method = "getSiteBlogPostingsPage",
				parameter = "siteId",
				service = "BlogPosting",
				value = "${siteId}");
		}

		task ("Then the shown response code is 200") {
			AssertTextEquals(
				locator1 = "OpenAPI#RESPONSE_CODE",
				method = "getSiteBlogPostingsPage",
				value1 = "200");
		}
	}

}