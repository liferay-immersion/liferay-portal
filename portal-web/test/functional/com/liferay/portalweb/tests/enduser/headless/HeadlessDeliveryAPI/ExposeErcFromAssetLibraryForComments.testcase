@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given a blog post is created") {
			BlogPostingAPI.getIdOfCreatedBlogPosting(
				articleBody = "Blogs Entry Content",
				headline = "Blogs Title");
		}
	}

	tearDown {
		BlogPostingAPI.deleteAllBlogPostings();

		echo("ok");
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanCreateChildCommentWithCustomExternalReferenceCode {
		property portal.acceptance = "true";

		task ("And Given with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("When create a child comment with a custom external reference code") {
			var commentId = JSONUtil.getWithJSONPath("${response}", "$.id");

			var response2 = CommentAPI.createCommentInBlogPosting(
				commentId = "${commentId}",
				commentText = "ChildComment",
				externalReferenceCode = "ERC_ChildComment");
		}

		task ("Then a child comment is being created") {
			var childCommentsTotalCount = CommentAPI.getFieldValueOfBlogPostingComments(
				commentId = "${commentId}",
				fieldName = "totalCount");

			TestUtils.assertEquals(
				actual = "${childCommentsTotalCount}",
				expected = "1");
		}

		task ("And Then can see the custom external reference code in the body response") {
			var externalReferenceCodes = CommentAPI.getFieldValueOfBlogPostingComments(
				commentId = "${commentId}",
				fieldName = "externalReferenceCode");

			TestUtils.assertEquals(
				actual = "${externalReferenceCodes}",
				expected = "ERC_ChildComment");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanCreateCommentWithCustomExternalReferenceCode {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("Then I can see the custom external reference code in the body response") {
			var commentErc = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingId = "${blogPostingId}",
				fieldName = "externalReferenceCode");

			TestUtils.assertEquals(
				actual = "${commentErc}",
				expected = "ercComment");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanCreateCommentWithoutCustomExternalReferenceCodePreviouslyCreated {
		property portal.acceptance = "true";

		task ("And Given with POST request I create a comment without a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne");
		}

		task ("When with POST request I create a comment with a custom external reference code with a value of the internal id of the previously created comment") {
			var commentId = JSONUtil.getWithJSONPath("${response}", "$.id");

			var response2 = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentTwo",
				externalReferenceCode = "${commentId}");
		}

		task ("Then another comment with the same external reference code is being created") {
			var commentsTotalCount = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingId = "${blogPostingId}",
				fieldName = "totalCount");

			TestUtils.assertEquals(
				actual = "${commentsTotalCount}",
				expected = "2");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanCreateCommentWithValueInternalIdPreviouslyCreated {
		property portal.acceptance = "true";

		task ("And Given with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("When with POST request I create a comment with a custom external reference code with a value of the internal id of the previously created comment") {
			var idComment = JSONUtil.getWithJSONPath("${response}", "$.id");

			var response2 = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentTwo",
				externalReferenceCode = "${idComment}");
		}

		task ("Then another comment with the same external reference code is being created") {
			var commentsTotalCount = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingId = "${blogPostingId}",
				fieldName = "totalCount");

			TestUtils.assertEquals(
				actual = "${commentsTotalCount}",
				expected = "2");
		}

		task ("And Then can see the custom external reference code in the body response") {
			var externalReferenceCodes = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingId = "${blogPostingId}",
				fieldName = "externalReferenceCode");

			TestUtils.assertEquals(
				actual = "${externalReferenceCodes}",
				expected = "ercComment,${idComment}");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanGetChildCommentByExternalReferenceCode {
		property portal.acceptance = "true";

		task ("And Given with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("When create a child comment with a custom external reference code") {
			var commentId = JSONUtil.getWithJSONPath("${response}", "$.id");

			var response2 = CommentAPI.createCommentInBlogPosting(
				commentId = "${commentId}",
				commentText = "ChildComment",
				externalReferenceCode = "ERC_ChildComment");
		}

		task ("When I make a GET request by external reference code of the child comment") {
			var commentText = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingChildCommentERC = "ERC_ChildComment",
				blogPostingCommentERC = "ercComment",
				fieldName = "text");
		}

		task ("Then I receive a correct body response") {
			TestUtils.assertEquals(
				actual = "${commentText}",
				expected = "<p>ChildComment</p>");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanGetCommentByExternalReferenceCode {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("When I make a GET request by external reference code") {
			task ("Get Blog Posting ID") {
				var getBlogPostings = BlogPostingAPI.getBlogPostings();

				var blogPostingERC = JSONUtil.getWithJSONPath("${getBlogPostings}", "$..externalReferenceCode");
			}

			var commentText = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingCommentERC = "ercComment",
				blogPostingERC = "${blogPostingERC}",
				fieldName = "text");
		}

		task ("Then I receive a correct body response") {
			TestUtils.assertEquals(
				actual = "${commentText}",
				expected = "<p>CommentOne</p>");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanGetCommentByExternalReferenceCodeWithCommentID {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment without a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne");
		}

		task ("When I make a GET request by external reference code using comment ID as external reference code") {
			task ("Get Blog Posting ID") {
				var getBlogPostings = BlogPostingAPI.getBlogPostings();

				var blogPostingERC = JSONUtil.getWithJSONPath("${getBlogPostings}", "$..externalReferenceCode");
			}

			var commentId = JSONUtil.getWithJSONPath("${response}", "$.id");

			var commentText = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingCommentERC = "${commentId}",
				blogPostingERC = "${blogPostingERC}",
				fieldName = "status");
		}

		task ("Then I receive an error about GET request by external reference code using comment ID as external reference code") {
			TestUtils.assertPartialEquals(
				actual = "${commentText}",
				expected = "NOT_FOUND");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CannotCreateTwoCommentsWithCustomExternalReferenceCode {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment with a custom external reference code") {
			var blogPostingId = BlogPostingAPI.getBlogPostingsIdList();

			CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentOne",
				externalReferenceCode = "ercComment");
		}

		task ("When with POST request I create a comment with an already existing custom external reference code") {
			var response = CommentAPI.createCommentInBlogPosting(
				blogPostingId = "${blogPostingId}",
				commentText = "CommentTwo",
				externalReferenceCode = "ercComment");
		}

		task ("Then I receive an error code response about duplicate folder erc") {
			TestUtils.assertPartialEquals(
				actual = "${response}",
				expected = "Duplicate message external reference code");
		}

		task ("And Then another comment with the same external reference code is not being created") {
			var commentsTotalCount = CommentAPI.getFieldValueOfBlogPostingComments(
				blogPostingId = "${blogPostingId}",
				fieldName = "totalCount");

			TestUtils.assertEquals(
				actual = "${commentsTotalCount}",
				expected = "1");
		}
	}

}