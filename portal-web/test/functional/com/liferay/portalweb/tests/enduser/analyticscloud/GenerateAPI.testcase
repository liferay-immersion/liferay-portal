@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();
		}

        task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToApis();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.launchAC();

		ACNavigation.goToSettings();

		ACSettings.goToApis();

		ACUtils.clickAnyButton(button = "Revoke");

		ACUtils.clickAnyButton(button = "Continue");
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11103 | Test Summary: There is no previous export process for the same type and date range"
	@priority = "4"
	test CreateNewScheduledExportProcess {
		var startDate = "1905-05-13";
		var startTime = "11:45:00.000";
        var endDate = "2022-05-13";
        var endTime = "09:20:00.000";
        var type = "page";
        var upperCaseType = StringUtil.upperCase("${type}");
        var status = "PENDING";
        var message = "A new data export file for this date range and type will be created. Please come back later.";

        task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a new export schedule via API") {
			ACApi.createNewExportSchedule(
				token = "${token}",
				type = "${type}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}");
		}

		task ("Check if the API response is correct for a new export schedule") {
			ACApi.viewApiResponseForExportProcess(
				upperCaseType = "${upperCaseType}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}",
				message = "${message}",
				status = "${status}");
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11104 | Test Summary: There is an export scheduled but not started"
	@priority = "3"
	test ExportScheduledButNotStarted {
		var startDate = "2000-11-06";
		var startTime = "11:00:00.000";
        var endDate = "2001-09-06";
        var endTime = "20:30:00.000";
        var type = "segment";
        var upperCaseType = StringUtil.upperCase("${type}");
        var status = "PENDING";
		var message1 = "A new data export file for this date range and type will be created. Please come back later.";
        var message2 = "A data export for this date range and type has already been scheduled. Please come back later.";

        task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a new export schedule via API") {
			ACApi.createNewExportSchedule(
				token = "${token}",
				type = "${type}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}");
		}

		task ("Check if the API response is correct for a new export schedule") {
			ACApi.viewApiResponseForExportProcess(
				upperCaseType = "${upperCaseType}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}",
				message = "${message1}",
				status = "${status}");
		}

		task ("Run the same curl command again") {
			ACApi.createNewExportSchedule(
				token = "${token}",
				type = "${type}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}");
		}

		task ("Check if API response is correct when run same curl twice and export process not started") {
			ACApi.viewApiResponseForExportProcess(
				upperCaseType = "${upperCaseType}",
				startDate = "${startDate}",
				startTime = "${startTime}",
				endDate = "${endDate}",
				endTime = "${endTime}",
				message = "${message2}",
				status = "${status}");
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11105 | Test Summary: The request command does not contain 'fromDate' or 'toDate'"
	@priority = "3"
	test RequestCommandNotContainFromDateOrToDate {
		var startDate = "1964-07-09";
		var startTime = "15:36:00.000";
        var endDate = "2017-06-15";
        var endTime = "10:20:00.000";
        var type = "account";
        var message = ""fromDate" and "toDate" query parameters are mandatory and must be ISO 8601 compliant yyyy-MM-dd'T'HH:mm[:ss.SSS'Z']";

        task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Run curl command without 'fromData' and 'toData'") {
			var curl = '''
				http://localhost:8080/api/reports/export/${type}
				-H "Authorization: Bearer ${token}"
				''';

			var apiResponse = JSONCurlUtil.get("${curl}", "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = "${apiResponse}",
				message = "${message}");
		}

		task ("Run curl command without 'fromDate'") {
			var curl = '''
				http://localhost:8080/api/reports/export/${type}\?toDate=${endDate}T${endTime}Z
				-H "Authorization: Bearer ${token}"
				''';

			var apiResponse = JSONCurlUtil.get("${curl}", "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = "${apiResponse}",
				message = "${message}");
		}

		task ("Run curl command without 'toData'") {
			var curl = '''
				http://localhost:8080/api/reports/export/${type}\?fromDate=${startDate}T${startTime}Z
				-H "Authorization: Bearer ${token}"
				''';

			var apiResponse = JSONCurlUtil.get("${curl}", "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = "${apiResponse}",
				message = "${message}");
		}
	}
}