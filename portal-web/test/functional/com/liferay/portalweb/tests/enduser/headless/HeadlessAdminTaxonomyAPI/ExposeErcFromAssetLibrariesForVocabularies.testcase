@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = "5"
	test CanCreateVocabularyWithNonExistentErc {
		property portal.acceptance = "true";

		task ("When user makes a PUT request to create a vocabulary with assetLibraryId and no ERC specified in the body") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = TaxonomyVocabularyAPI.updateTaxonomyVocabularyByErc(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "nonexistent-erc",
				name = "Vocabulary Name");
		}

		task ("Then a vocabulary is created with a generated ERC in response body") {
			var actualExternalReferenceCode = TaxonomyVocabularyAPI.getElementOfCreatedVocabulary(
				element = "$..externalReferenceCode",
				responseToParse = "${response}");

			TestUtils.assertEquals(
				actual = "${actualExternalReferenceCode}",
				expected = "nonexistent-erc");
		}
	}

}