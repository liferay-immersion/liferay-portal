@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

    @description = "Automation ID: LPS-149746 | Test Summary: Verify if the team member table contains the following data (Name - Email - Support Seat - Role - Status)"
    @priority = "4"
    test AssertAllItemsInTheTable {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account DXP");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - Customer Portal Site - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Assert the details of the table") {
			CP2TeamMembers.viewTableValue(
				name = "Test Test",
				email = "test@liferay.com",
				role = "Administrator",
				status = "Active");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}
    }

    @description = "Automation ID: LPS-149748 | Test Summary: Verify if in the third column next to the 'Support Seat' heading the information icon has a tooltip"
    @priority = "4"
    test CanViewTooltipInSupportSeat {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account DXP");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - Customer Portal Site - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("View the help information") {
			Tooltip.viewHelpInfo(info = "The limit of support seats available counts the total of Administrators & Requesters roles assigned due to both have role permissions to open support tickets.");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}
    }

    @description = "Automation ID: LPS-149752 | Test Summary: Verify that in the table the guest user is below the current user and its status is displayed as invited"
    @priority = "5"
    test AssertTheStatusAndOrderOfTheGuestUser {

        // TODO LPS-149752 archive pending implementation

    }

    @description = "Automation ID: LPS-149754 | Test Summary: Verify that the text in the upper right corner is similar to 'Support Seats: 1 of 3 available', if the project has a support seats limit"
    @priority = "4"
    test CanViewTextIfProjectHasLimitOfSupportSeats {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account DXP");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - Customer Portal Site - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Assert in the number of support seats available") {
			CP2TeamMembers.viewSupportSeatsAvailable(available = "2 of 3 available");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}
    }

    @description = "Automation ID: LPS-149756 | Test Summary: Verify if the '+ Invite' button is visible for administrator roles only"
    @priority = "5"
    test CanViewTheInviteButton {
		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - Customer Portal Site - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CustomerPortal.enterOnProject(title = "Test Account DXP");

			CP2NavigationMenu.goToTeamMembers();
		}

		task ("Assert that the button is not on the screen") {
			AssertElementNotPresent(locator1 = "CP2TeamMembers#INVITE_BUTTON");
		}

		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account DXP");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Get into the project and go to Team Members page") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CP2TeamMembers.teamMembersFlow();
		}

		task ("Assert that the Invite button is present on the screen") {
			AssertElementPresent(locator1 = "CP2TeamMembers#INVITE_BUTTON");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}
    }
}