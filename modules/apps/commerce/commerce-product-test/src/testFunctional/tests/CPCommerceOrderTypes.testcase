@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify active order type is automatically assigned to an order created via the account selector."
	@priority = "3"
	test AssertActiveOrderTypeAutomaticallyAssignedToOrderCreatedViaAccountSelector {
		property portal.acceptance = "false";

		task ("Given active and inactive order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify active order type is automatically assigned to an order created via pending orders."
	@priority = "3"
	test AssertActiveOrderTypeAutomaticallyAssignedToOrderCreatedViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given active and inactive order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify inactive order type is not assigned to an order created via the account selector."
	@priority = "3"
	test AssertInactiveOrderTypeNotAssignedToOrderViaAccountSelector {
		property portal.acceptance = "false";

		task ("Given an inactive order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the inactive order type should not be assigned to the order") {
			AssertElementNotPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify inactive order type is not assigned to an order created via pending orders."
	@priority = "3"
	test AssertInactiveOrderTypeNotAssignedToOrderViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given an inactive order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the inactive order type should not be assigned to the order") {
			AssertElementNotPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify single active order type is automatically assigned to orders created via the account selector."
	@priority = "3"
	test AssertSingleOrderTypeAutomaticallyAssignedToOrderCreatedViaAccountSelector {
		property portal.acceptance = "false";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify single active order type is automatically assigned to orders created via pending orders."
	@priority = "3"
	test AssertSingleOrderTypeAutomaticallyAssignedToOrderCreatedViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify users can create a new order type."
	@priority = "3"
	test CreateOrderType {
		property portal.acceptance = "false";

		task ("When I create a new order type from the Order Types page") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceOrders.addOrderType(
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("Then the order type will be added correctly") {
			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type");

			CommerceOrders.assertOrderTypesEntry(
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}
	}

	@description = "Verify a new order type can be deleted"
	@priority = "3"
	test DeleteOrderType {
		task ("Given an order type is created through the Order Types Page") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceOrders.openOrderTypesAdmin();
		}

		task ("When that order type is deleted") {
			CommerceOrders.deleteOrderType(orderTypeName = "Test Order Type");
		}

		task ("Then it should no longer appear in the Order Types Page") {
			AssertElementNotPresent(
				key_entryName = "Test Order Type",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "Verify users can edit an order type."
	@priority = "3"
	test EditOrderType {
		property portal.acceptance = "false";

		task ("Given an order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I edit the name and description of the order type and publish it") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type");

			CommerceOrders.editOrderType(
				orderTypeDescription = "Test Order Type Description Edit",
				orderTypeName = "Test Order Type Edit");
		}

		task ("Then the order type name and description should be updated") {
			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type Edit");

			CommerceOrders.assertOrderTypesEntry(
				orderTypeDescription = "Test Order Type Description Edit",
				orderTypeName = "Test Order Type Edit");
		}
	}

	@description = "Verify when creating a new order with add to cart and there is only 1 order type active for the channel, that order type is set in the order"
	@priority = "4"
	test OrderTypeIsAutomaticallySetForNewOrderWhenTheUserAddsToCart {
		property portal.acceptance = "false";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When the buyer logs in and adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");
		}

		task ("Then a new order is automatically created and the order type is set as the Order Type for the order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");

			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify user can select order type when creating a new order via the account selector."
	@priority = "3"
	test SelectOrderTypeWhenCreatingNewOrderViaAccountSelector {
		property portal.acceptance = "false";

		task ("Given two active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and go to the Minium site to create a new order from the account selector drop down.") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then I should be able to select the Test Order Type for my new order.") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Select(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type");

			Button.click(button = "Add Order");

			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify users can select order type when creating a new order via pending orders if there are multiple order types."
	@priority = "3"
	test SelectOrderTypeWhenCreatingNewOrderViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given two new order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then I should be able to select the order type for my new order") {
			SelectFrame.selectFrameNoLoading(
				key_src = "mode",
				locator1 = "IFrame#IFRAME_SRC");

			Select(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type 2");

			Button.click(button = "Add Order");

			AssertElementPresent(
				key_orderType = "Test Order Type 2",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

}