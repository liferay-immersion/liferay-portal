@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommerceOrderImporterTypeConfiguration.config";
	property osgi.module.configurations = "enabled=&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();

        CommerceJSONOrdersAPI._deleteAllCommerceOrdersAndCheck();
	}

	@description = "Verify if the wish list pagination show the right items"
	@priority = "3"
	test ViewPaginationOnImportFromWishlist {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the buyer add six new wish lists") {
			CommerceNavigator.goToWishLists();

			for (var wishListNumber : list "1,2,3,4,5,6") {
				CommerceWishList.addWishList(wishListName = "Test Wish List ${wishListNumber}");
			}
		}

		task ("When the buyer go to import a new order from wish list and change tha pagination to 4 items per page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			CommerceOrders.importOrderFromType(orderType = "Wish Lists");

			SelectFrameTop();

			IFrame.selectModalFrame();
		}

		task ("Then only four wish lists are displayed") {
			Pagination.changePagination(itemsPerPage = "4 items");

			CommerceEntry.viewPaginationResults(results = "Showing 1 to 4 of 6");

			for (var wishListNumber : list "1,2,3,4") {
				AssertVisible(
					key_itemName = "Test Wish List ${wishListNumber}",
					locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
			}

			AssertElementNotPresent(
				key_itemName = "Test Wish List 5",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");

			AssertElementNotPresent(
				key_itemName = "Test Wish List 6",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
		}

		task ("And when the user go to next page") {
			Click(locator1 = "Pagination#NEXT_LINK");
		}

		task ("Then only two wish lists are displayed") {
			CommerceEntry.viewPaginationResults(results = "Showing 5 to 6 of 6");

			for (var wishListNumber : list "1,2,3,4") {
				AssertElementNotPresent(
					key_itemName = "Test Wish List ${wishListNumber}",
					locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
			}

			AssertVisible(
				key_itemName = "Test Wish List 5",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");

			AssertVisible(
				key_itemName = "Test Wish List 6",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
		}

		task ("And when the user go to first page") {
			Click(locator1 = "Pagination#PREVIOUS_LINK");
		}

		task ("Then the first page is displayed") {
			AssertElementPresent(
				locator1 = "CommerceEntry#SELECTED_TABLE_PAGINATION",
				key_pageNumber = "1");
		}

		task ("And when the user go to second page") {
			Click(locator1 = "Pagination#NEXT_LINK");
		}

		task ("Then the first page is displayed") {
			AssertElementPresent(
				locator1 = "CommerceEntry#SELECTED_TABLE_PAGINATION",
				key_pageNumber = "2");
		}
	}

	@description = "Verify only one wish list can be imported from list"
	@priority = "3"
	test AssertOnlyOneWishlistCanBeChosenForTheImport {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the buyer add three new wish lists") {
			CommerceNavigator.goToWishLists();

			for (var wishListNumber : list "1,2,3") {
				CommerceWishList.addWishList(wishListName = "Test Wish List ${wishListNumber}");
			}
		}

		task ("When the buyer go to import a new order from wish list") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			CommerceOrders.importOrderFromType(orderType = "Wish Lists");

			SelectFrameTop();

			IFrame.selectModalFrame();
		}

		task ("Then the created wish lists are displayed") {
			for (var wishListNumber : list "1,2,3") {
				AssertElementPresent(
					key_itemName = "Test Wish List ${wishListNumber}",
					locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
			}
		}

		task ("And when the user select one from then") {
			Click(
				key_itemName = "Test Wish List 3",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
		}

		task ("Then the modal is changed and the others are not displayed") {
			AssertElementNotPresent(
				key_itemName = "Test Wish List 1",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");

			AssertElementNotPresent(
				key_itemName = "Test Wish List 3",
				locator1 = "CommerceEntry#SELECT_ITEM_FROM_LIST");
		}

	}
}